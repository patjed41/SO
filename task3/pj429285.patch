diff -rupNEZbB ./usr/include/minix/callnr.h zad3/usr/include/minix/callnr.h
--- ./usr/include/minix/callnr.h	2022-05-07 12:40:30.775157604 +0200
+++ zad3/usr/include/minix/callnr.h	2022-05-07 12:59:44.547672706 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GETLCAPID            (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB ./usr/include/unistd.h zad3/usr/include/unistd.h
--- ./usr/include/unistd.h	2022-05-07 12:40:53.751182655 +0200
+++ zad3/usr/include/unistd.h	2022-05-07 13:00:08.455679333 +0200
@@ -158,6 +158,9 @@ extern	 int optind;
 extern	 int optopt;
 #endif
 
+/* getlcapid */
+pid_t getlcapid(pid_t pid_1, pid_t pid_2);
+
 /*
  * The Open Group Base Specifications, Issue 6; IEEE Std 1003.1-2001 (POSIX)
  */
diff -rupNEZbB ./usr/src/include/unistd.h zad3/usr/src/include/unistd.h
--- ./usr/src/include/unistd.h	2022-05-07 12:43:36.879364234 +0200
+++ zad3/usr/src/include/unistd.h	2022-05-07 13:01:01.027696515 +0200
@@ -158,6 +158,9 @@ extern	 int optind;
 extern	 int optopt;
 #endif
 
+/* getlcapid */
+pid_t getlcapid(pid_t pid_1, pid_t pid_2);
+
 /*
  * The Open Group Base Specifications, Issue 6; IEEE Std 1003.1-2001 (POSIX)
  */
diff -rupNEZbB ./usr/src/lib/libc/misc/getlcapid.c zad3/usr/src/lib/libc/misc/getlcapid.c
--- ./usr/src/lib/libc/misc/getlcapid.c	1970-01-01 01:00:00.000000000 +0100
+++ zad3/usr/src/lib/libc/misc/getlcapid.c	2022-05-07 13:02:48.887741732 +0200
@@ -0,0 +1,23 @@
+#include <lib.h>
+#include <minix/rs.h>
+
+pid_t getlcapid(pid_t pid_1, pid_t pid_2)
+{
+    endpoint_t pm_ep;
+    if (minix_rs_lookup("pm", &pm_ep) != 0)
+    {
+        errno = ENOSYS;
+        return -1;
+    }
+
+    message m;
+    m.m1_i1 = pid_1;
+    m.m1_i2 = pid_2;
+
+    int syscall_result = _syscall(pm_ep, PM_GETLCAPID, &m);
+    if (syscall_result < 0) {
+        return -1;
+    }
+
+    return m.m1_i1;
+}
diff -rupNEZbB ./usr/src/lib/libc/misc/Makefile.inc zad3/usr/src/lib/libc/misc/Makefile.inc
--- ./usr/src/lib/libc/misc/Makefile.inc	2022-05-07 12:46:32.967566062 +0200
+++ zad3/usr/src/lib/libc/misc/Makefile.inc	2022-05-07 13:02:48.735741660 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c getlcapid.c
diff -rupNEZbB ./usr/src/minix/include/minix/callnr.h zad3/usr/src/minix/include/minix/callnr.h
--- ./usr/src/minix/include/minix/callnr.h	2022-05-07 12:35:48.830864620 +0200
+++ zad3/usr/src/minix/include/minix/callnr.h	2022-05-07 12:55:33.151659007 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GETLCAPID            (PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupNEZbB ./usr/src/minix/servers/pm/do_getlcapid.c zad3/usr/src/minix/servers/pm/do_getlcapid.c
--- ./usr/src/minix/servers/pm/do_getlcapid.c	1970-01-01 01:00:00.000000000 +0100
+++ zad3/usr/src/minix/servers/pm/do_getlcapid.c	2022-05-07 12:57:51.551652752 +0200
@@ -0,0 +1,50 @@
+#include "pm.h"
+#include "proto.h"
+#include "mproc.h"
+
+int do_getlcapid() {
+    pid_t pid_1 = m_in.m1_i1;
+    pid_t pid_2 = m_in.m1_i2;
+
+    int id_1 = -1; // index of process 1 in table mproc
+    int id_2 = -1; // index of process 2 in table mproc
+
+    // is_ancestor_of_1[i] == 1 if mproc[i] is an ancestor of process 1.
+    // Otherwise, is_ancestor_of_1[i] == 0;
+    int is_ancestor_of_1[NR_PROCS];
+
+    // Findind id_1 and id_2.
+    for (int id = 0; id < NR_PROCS; id++) {
+        is_ancestor_of_1[id] = 0;
+
+        if (mproc[id].mp_pid == pid_1) {
+            id_1 = id;
+        }
+        if (mproc[id].mp_pid == pid_2) {
+            id_2 = id;
+        }
+    }
+
+    // At least one process in inactive.
+    if (id_1 == -1 || !(mproc[id_1].mp_flags & IN_USE) ||
+        id_2 == -1 || !(mproc[id_2].mp_flags & IN_USE)) {
+        return EINVAL;
+    }
+
+    // Finding ancestor of process 1.
+    while (id_1 != mproc[id_1].mp_parent) {
+        id_1 = mproc[id_1].mp_parent;
+        is_ancestor_of_1[id_1] = 1;
+    }
+
+    // Finding lca.
+    while (id_2 != mproc[id_2].mp_parent) {
+        id_2 = mproc[id_2].mp_parent;
+        if (is_ancestor_of_1[id_2] == 1) {
+            mp->mp_reply.m1_i1 = mproc[id_2].mp_pid;
+            return OK;
+        }
+    }
+
+    return ESRCH;
+}
diff -rupNEZbB ./usr/src/minix/servers/pm/Makefile zad3/usr/src/minix/servers/pm/Makefile
--- ./usr/src/minix/servers/pm/Makefile	2022-05-07 12:38:07.299004819 +0200
+++ zad3/usr/src/minix/servers/pm/Makefile	2022-05-07 12:57:49.059652544 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c do_getlcapid.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupNEZbB ./usr/src/minix/servers/pm/proto.h zad3/usr/src/minix/servers/pm/proto.h
--- ./usr/src/minix/servers/pm/proto.h	2022-05-07 12:38:07.963005510 +0200
+++ zad3/usr/src/minix/servers/pm/proto.h	2022-05-07 12:57:49.719652598 +0200
@@ -89,3 +89,6 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* do_getlcapid.c */
+int do_getlcapid(void);
diff -rupNEZbB ./usr/src/minix/servers/pm/table.c zad3/usr/src/minix/servers/pm/table.c
--- ./usr/src/minix/servers/pm/table.c	2022-05-07 12:38:08.103005656 +0200
+++ zad3/usr/src/minix/servers/pm/table.c	2022-05-07 12:57:49.863652610 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_GETLCAPID) = do_getlcapid		/* getlcapid */
 };
